<?php

/**
 * @file
 * Code for the achievement_badge_manager feature.
 */
include_once 'openbadging_badge_manager.features.inc';

/**
 * Implementation of hook_init().
 * include css file.
 * calls on badge-manager link.
 */
function openbadging_badge_manager_init() {
    drupal_add_css(drupal_get_path('module', 'openbadging_badge_manager') . '/openbadging_badge_manager.css');
}

/**
 * Implementation of hook_action_info().
 * create two action give badge and take badge.
 */
function openbadging_badge_manager_action_info() {
    return array(
        'achievement_badge_manager_give_achievements' => array(
            'type' => 'entity',
            'label' => t('Give'),
            'configurable' => FALSE,
            'behavior' => array('insert_property'),
        ),
        'achievement_badge_manager_take_achievements' => array(
            'type' => 'entity',
            'label' => t('Take'),
            'configurable' => FALSE,
            'behavior' => array('deletes_property'),
        ),
    );
}

/*
 * @param $entity
 * @param $context
 * this function calls when admin give achievement to user.
 */

function achievement_badge_manager_give_achievements($entity, $context) {
      if (!isset($entity->type)) {
        achievements_unlocked(arg(2), $entity->uid);
        //create a unique badge image for user
        $path_badge = entity_load('openbadging', array(arg(2)));
        $path_key = key($path_badge);
        $path_array = $path_badge[$path_key];
        $absoult_path_badge = file_create_url($path_array->field_badge_entity_unlock_image['und'][0]['uri']);
        $real_path = drupal_realpath($path_array->field_badge_entity_unlock_image['und'][0]['uri']);
        $return = create_unique_badge_image_user($absoult_path_badge,$entity->uid, $real_path, arg(2));
        if($return){
        //if we select a achievement assign to multiple user.
        module_invoke_all('achievement_badge_manager_give_amu', $entity, $context);
	      }
				else{
				 achievements_locked(arg(2), $entity->uid); // log error in db.
				}
    } 
    else {
        if ($entity->type == 'badges') {
            achievements_unlocked($entity->bid, arg(2));
            //create a unique badge image for user
            $path_badge = entity_load('openbadging', array($entity->bid));
            $path_key = key($path_badge);
            $path_array = $path_badge[$path_key];
            $absoult_path_badge = file_create_url($path_array->field_badge_entity_unlock_image['und'][0]['uri']);
            $real_path = drupal_realpath($path_array->field_badge_entity_unlock_image['und'][0]['uri']);
						$return = create_unique_badge_image_user($absoult_path_badge, arg(2), $real_path, $entity->bid);
						if($return){
						//if we select a user a assign multiple badge.
						module_invoke_all('achievement_badge_manager_give_mau', $entity, $context);
						}
						else{
						 achievements_locked($entity->bid, arg(2)); // and log error in data base.
						}
        }
        if ($entity->type == 'main') {
            achievements_unlocked(arg(2), $entity->uid);
            //create a unique badge image for user
            $path_badge = entity_load('openbadging', array(arg(2)));
            $path_key = key($path_badge);
            $path_array = $path_badge[$path_key];
            $absoult_path_badge = file_create_url($path_array->field_badge_entity_unlock_image['und'][0]['uri']);
            $real_path = drupal_realpath($path_array->field_badge_entity_unlock_image['und'][0]['uri']);
						$return = create_unique_badge_image_user($absoult_path_badge, $entity->uid, $real_path, arg(2));      
						if($return){
						//if we select a achievement assign to multiple user.
						module_invoke_all('achievement_badge_manager_give_amu', $entity, $context);
						} 
						else{
						achievements_locked(arg(2), $entity->uid); // and log error in data base.
						}
        }
    }
}

/*
 * @param $entity
 * @param $context
 * this function calls when admin take achievement from user.
 */

function achievement_badge_manager_take_achievements($entity, $context) {
    if (!isset($entity->type)) {
        achievements_locked(arg(2), $entity->uid);
        //if we select a achievement take it from multiple user.
        module_invoke_all('openbadging_badge_manager_take_amu', $entity, $context);
    } 
    else {
        if ($entity->type == 'badges') {
            achievements_locked($entity->bid, arg(2));
            //if we select a user a and take multiple badge from him/her.
            module_invoke_all('openbadging_badge_manager_take_mau', $entity, $context);
        }
        if ($entity->type == 'main') {
            //if we select a achievement take it from multiple user.
            achievements_locked(arg(2), $entity->uid);
            module_invoke_all('openbadging_badge_manager_take_amu', $entity, $context);
        }
    }
}

/**
 *
 * Implements hook_menu
 * create link Badge Manager to admin menu.
 * create two tab Manage badge and Manage Earners.
 */
function openbadging_badge_manager_menu() {
    $items = array();
    $items['admin/settings/badge-manager'] = array(
        'title' => "Badge Manager",
        'page callback' => 'drupal_goto',
        'page arguments' => array('badge-manager'),
        'description' => 'Manage Badges And Earners',
        'access arguments' => array('administer permissions'),
    );
    $items['badge-manager'] = array(
        //'title' => t("Badge Manager"),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('autocomplete_form_badges'),
        'description' => 'Manage Badges And Earners',
        'access arguments' => array('administer permissions'),
    );
    $items['badge-manager/badges'] = array(
        'title' => 'Manage Badges',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('autocomplete_form_badges'),
        'description' => 'manage badges and earners.',
        'access arguments' => array('administer permissions'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );
    $items['achivement-mb/user/autocomplete'] = array(
        'title' => 'Autocomplete for users',
        'page callback' => 'achievement_badge_manager_autocomplete',
        'access arguments' => array('administer permissions'),
        'type' => MENU_CALLBACK
    );
    $items['badge-manager/earners'] = array(
        'title' => 'Manage Earners',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('autocomplete_form_earners'),
        'description' => 'manage badges and earners.',
        'access arguments' => array('administer permissions'),
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );
    $items['achivement-mb/earner/autocomplete'] = array(
        'title' => 'Autocomplete for badges',
        'page callback' => 'achievement_badge_manager_autocomplete_earners',
        'access arguments' => array('administer permissions'),
        'type' => MENU_CALLBACK
    );
    return $items;
}

/*
 * create autocomplete type form for badge manager.
 */

function autocomplete_form_badges() {
    $form = array();

    $form['badges'] = array(
        '#title' => t('select user'),
        '#type' => 'textfield',
        '#description' => 'Search by first-name/last-name/Email-address.',
        '#autocomplete_path' => 'achivement-mb/user/autocomplete',
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Next',
    );
    return $form;
}

/*
 * badges form submit function.
 */

function autocomplete_form_badges_submit($form, &$form_state) {
    $input = $form['badges']['#value'];
    preg_match('~<(.*?)>~', $input, $output);
    $id = $output[1];
    $form_state['redirect'] = 'badge-manager/badges/' . $id;
}

/*
 * create autocomplete type form for manage earners.
 */

function autocomplete_form_earners() {

    $form = array();

    $form['earners'] = array(
        '#title' => t('select badge'),
        '#type' => 'textfield',
        '#description' => 'Search by badge title.',
        '#autocomplete_path' => 'achivement-mb/earner/autocomplete',
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Next',
    );
    return $form;
}

/*
 * manage earner form submit function.
 */

function autocomplete_form_earners_submit($form, &$form_state) {
    $result = db_select('openbadging', 'a')
            ->fields('a', array('bid'))
            ->condition('title ', $form['earners']['#value'], '=')
            ->execute()
            ->fetchAll();
    $form_state['redirect'] = 'badge-manager/earner/' . $result[0]->bid;
}

/*
 * callback for badge manager form.
 */

function achievement_badge_manager_autocomplete($string) {
    $matches = array();
    $result = db_query("SELECT uid,name FROM {users} WHERE name LIKE '" . $string . "%'", array())->fetchAll();
    // save the query to matches
    foreach ($result as $row) {
        $matches["<" . $row->uid . ">"] = check_plain($row->name);
    }

    // Return the result to the form in json
    drupal_json_output($matches);
}

/*
 * callback for manage earners form.
 */

function achievement_badge_manager_autocomplete_earners($string) {
    $matches = array();
    $result = db_select('openbadging', 'a')
            ->fields('a', array('title'))
            ->condition('title', db_like($string) . '%', 'LIKE')
            ->condition('type', 'badges', '=')
            ->execute();

    // save the query to matches
    foreach ($result as $row) {
        $matches[$row->title] = check_plain($row->title);
    }

    // Return the result to the form in json
    drupal_json_output($matches);
}

/*
 * @params $bid(achievement id).
 * @params $uid(user id).
 * this function check status of all badge according to selected user.
 * @return boolean. 
 */

function check_badge_awared($bid, $uid) {

    $result = db_select('achievement_unlocks', 'u')
            ->fields('u')
            ->condition('achievement_id ', $bid, '=')
            ->condition('uid ', $uid, '=')
            ->execute()
            ->fetchAll();
    if (!empty($result)) {
        return ('Awarded');
    } 
    else {
        return ('Not Awarded');
    }
}

/**
 * Implement hook_block_info().
 * @global type $base_url
 * @return array 
 */
function openbadging_badge_manager_block_info() {
    global $base_url;
    $blocks = array(
        'badge_manager' => array(
            'info' => t('Badge manager block'),
            'region' => 'featured',
            'status' => 1,
            'visibility' => BLOCK_VISIBILITY_NOTLISTED,
            'cache' => DRUPAL_NO_CACHE,
            'weight' => -20,
        //'pages' => array('badge-manager', 'badge-manager/*'), 
        ),
        'badge_manager_content_earner' => array(
            'info' => t('badge manager content for manage badge tab'),
            'region' => 'content',
            'status' => 1,
            'visibility' => BLOCK_VISIBILITY_LISTED,
            'cache' => DRUPAL_NO_CACHE,
            'weight' => -17,
            'pages' => 'badge-manager/earners',
        ),
        'badge_manager_upper_earner' => array(
            'info' => t('badge manager content for manage badge tab'),
            'region' => 'content',
            'status' => 1,
            'visibility' => BLOCK_VISIBILITY_LISTED,
            'cache' => DRUPAL_NO_CACHE,
            'weight' => -27,
            'pages' => 'badge-manager/earners',
        ),
        'badge_manager_content_badges' => array(
            'info' => t('badge manager content for manage badges tab'),
            'region' => 'content',
            'status' => 1,
            'visibility' => BLOCK_VISIBILITY_NOTLISTED,
            'cache' => DRUPAL_NO_CACHE,
            'weight' => -17,
        //'pages' => array('badge-manager', 'badge-manager/badges'), 
        ),
        'badge_manager_upper_badge' => array(
            'info' => t('badge manager content upper for manage badges tab'),
            'region' => 'content',
            'status' => 1,
            'visibility' => BLOCK_VISIBILITY_NOTLISTED,
            'cache' => DRUPAL_NO_CACHE,
            'weight' => -27,
        //'pages' => array('badge-manager', 'badge-manager/badges'), 
        ),
    );
    return $blocks;
}

/**
 * Implement hook_block_view()
 * @param type $delta
 */
function openbadging_badge_manager_block_view($delta = '') {
    $block = array();
    global $user;
    switch ($delta) {
        case 'badge_manager':
            if ((arg(0) == 'badge-manager' && $user->uid == 1) || (arg(0) == 'badge-manager' && $user->uid == 1 && arg(1) != '')) {
                $block['subject'] = 'Badge Manager';
                $block['content'] = '<i>Badge manager allows you to give or take away badges from users.<br/>
To manage multiple badges for a user, go to Manage badges and select the user by entering their first name/last name/ email address in the auto-complete search box.<br/>
To manage a badge for multiple users, go to Manage earners and select the badge by entering badge name in the auto complete search box.</i>';
            }
            break;
        case 'badge_manager_content_earner':
            if ($user->uid == 1) {
                $block['subject'] = NULL;
                $block['content'] = '<b>You can also manage multiple badges for an earner by changing the view to Manage badges.</b>';
            }
            break;
        case 'badge_manager_upper_earner':
            if ($user->uid == 1) {
                $block['subject'] = NULL;
                $block['content'] = '<i>Manage badge (give/take away) for multiple users.</i>';
            }
            break;
        case 'badge_manager_content_badges':
            if ((arg(0) == 'badge-manager' && $user->uid == 1 && arg(1) == '') || (arg(0) == 'badge-manager' && $user->uid == 1 && arg(1) == 'badges' && arg(2) == '')) {
                $block['subject'] = NULL;
                $block['content'] = '<b>You can also manage multiple earners for a badge by changing the view to Manage earners.</b>';
            }
            break;
        case 'badge_manager_upper_badge':
            if ((arg(0) == 'badge-manager' && $user->uid == 1 && arg(1) == '') || (arg(0) == 'badge-manager' && $user->uid == 1 && arg(1) == 'badges' && arg(2) == '')) {
                $block['subject'] = NULL;
                $block['content'] = '<i>Manage multiple badges (give/take away) for a user.</i>';
            }
            break;
    }
    return $block;
}
